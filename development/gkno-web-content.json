{
  "categories": {
    "Alignment": [
      "mosaik"
    ], 
    "BAM-processing": [
      "bamtools-index"
    ], 
    "Variant-discovery": [
      "freebayes", 
      "realign"
    ], 
    "Variant-graph": [
      "realign"
    ]
  }, 
  "pipelines": {
    "bamtools-index": {
      "arguments": [
        {
          "data type": "string", 
          "description": "The input BAM file.", 
          "long form argument": "--in", 
          "short form argument": "-i"
        }, 
        {
          "data type": "string", 
          "description": "The index file.", 
          "long form argument": "--out", 
          "short form argument": "-o"
        }, 
        {
          "data type": "flag", 
          "description": "create non-standard (depth based) index file (*.bti). Default behaviour is to create standard BAM index (*.bai)", 
          "long form argument": "--depth-based-index", 
          "short form argument": "-b"
        }
      ], 
      "description": "Index BAM files."
    }, 
    "freebayes": {
      "arguments": [
        {
          "data type": "string", 
          "description": "The genomic region.", 
          "long form argument": "--region", 
          "short form argument": "-rg"
        }, 
        {
          "data type": "string", 
          "description": "The input BAM file.", 
          "long form argument": "--in", 
          "short form argument": "-i"
        }
      ], 
      "description": "run freebayes"
    }, 
    "mosaik": {
      "arguments": [
        {
          "data type": "string", 
          "description": "The reference FASTA file.", 
          "long form argument": "--fasta-reference", 
          "short form argument": "-r"
        }, 
        {
          "data type": "string", 
          "description": "The output BAM files.", 
          "long form argument": "--out", 
          "short form argument": "-o"
        }, 
        {
          "data type": "string", 
          "description": "The single end ann file.", 
          "long form argument": "--ann-se", 
          "short form argument": "-as"
        }, 
        {
          "data type": "string", 
          "description": "The paired end ann file.", 
          "long form argument": "--ann-pe", 
          "short form argument": "-ap"
        }, 
        {
          "data type": "string", 
          "description": "The input read archive.", 
          "long form argument": "--in", 
          "short form argument": "-i"
        }
      ], 
      "description": "ref + align"
    }, 
    "realign": {
      "arguments": [
        {
          "data type": "integer", 
          "description": "To detect interrupted repeats, build across sequence until it has entropy > N bits per bp.  (default: 0, off)", 
          "long form argument": "--min-repeat-entropy", 
          "short form argument": "-mre"
        }, 
        {
          "data type": "integer", 
          "description": "When assembling observations across repeats, require the total repeat length at least this many bp.  (default: 5)", 
          "long form argument": "--min-repeat-length", 
          "short form argument": "-mrl"
        }, 
        {
          "data type": "integer", 
          "description": "Require at least this sum of quality of observation supporting an alternate allele within a single individual in order to evaluate the position.  default: 0", 
          "long form argument": "--min-alternate-qsum", 
          "short form argument": "-maq"
        }, 
        {
          "data type": "string", 
          "description": "Genomic region.", 
          "long form argument": "--region", 
          "short form argument": "-rg"
        }, 
        {
          "data type": "flag", 
          "description": "Ignore complex events (composites of other classes).", 
          "long form argument": "--no-complex", 
          "short form argument": "-u"
        }, 
        {
          "data type": "flag", 
          "description": "Ignore multi-nuceotide polymorphisms, MNPs.", 
          "long form argument": "--no-mnps", 
          "short form argument": "-X"
        }, 
        {
          "data type": "string", 
          "description": "A file containing per-sample estimates of contamination, such as those generated by VerifyBamID.  The format should be: sample p(read=R|genotype=AR) p(read=A|genotype=AA). Sample '*' can be used to set default contamination estimates.", 
          "long form argument": "--contamination-estimates", 
          "short form argument": "-ce"
        }, 
        {
          "data type": "string", 
          "description": "Integrate all genotype combinations in our posterior space which include no more than N samples with their Mth best.", 
          "long form argument": "--posterior-integration-limits", 
          "short form argument": "-W"
        }, 
        {
          "data type": "integer", 
          "description": "Evaluate only the best N SNP alleles, ranked by sum of supporting quality scores.  (Set to 0 to use all; default: all)", 
          "long form argument": "--use-best-n-alleles", 
          "short form argument": "-n"
        }, 
        {
          "data type": "string", 
          "description": "bam index file.", 
          "long form argument": "--index", 
          "short form argument": "-x"
        }, 
        {
          "data type": "integer", 
          "description": "Exclude alleles from analysis if their supporting base quality is less than Q.  default: 0", 
          "long form argument": "--min-base-quality", 
          "short form argument": "-mbq"
        }, 
        {
          "data type": "float", 
          "description": "Report sites if the probability that there is a polymorphism at the site is greater than N.  default: 0.0001.", 
          "long form argument": "--pvar", 
          "short form argument": "-v"
        }, 
        {
          "data type": "float", 
          "description": "Require at least this fraction of observations supporting an alternate allele within a single individual in the in order to evaluate the position.  default: 0.2", 
          "long form argument": "--min-alternate-fraction", 
          "short form argument": "-maf"
        }, 
        {
          "data type": "string", 
          "description": "Additional bam file for build bam.  A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise.", 
          "long form argument": "--build-bam", 
          "short form argument": "-bb"
        }, 
        {
          "data type": "string", 
          "description": "The input bam files(s).", 
          "long form argument": "--in", 
          "short form argument": "-i"
        }, 
        {
          "data type": "flag", 
          "description": "Ignore insertion and deletion alleles.", 
          "long form argument": "--no-indels", 
          "short form argument": "-ni"
        }, 
        {
          "data type": "string", 
          "description": "When specified, only variant alleles provided in this input VCF will be used for the construction of complex or haplotype alleles.", 
          "long form argument": "--haplotype-basis-alleles", 
          "short form argument": "-hba"
        }, 
        {
          "data type": "string", 
          "description": "The input read archive.", 
          "long form argument": "--read-archive", 
          "short form argument": "-a"
        }, 
        {
          "data type": "string", 
          "description": "Read a copy number map from the BED file FILE, which has the format: reference sequence, start, end, sample name, copy number ... for each region in each sample which does not have the default copy number as set by --ploidy.", 
          "long form argument": "--cnv-map", 
          "short form argument": "-cnv"
        }, 
        {
          "data type": "integer", 
          "description": "Sets the default ploidy for the analysis to N.  default: 2.", 
          "long form argument": "--ploidy", 
          "short form argument": "-p"
        }, 
        {
          "data type": "integer", 
          "description": "Exclude alignments from analysis if they have a mapping quality less than Q.  default: 0", 
          "long form argument": "--min-mapping-quality", 
          "short form argument": "-mmq"
        }, 
        {
          "data type": "flag", 
          "description": "Use mapping quality of alleles when calculating data likelihoods.", 
          "long form argument": "--use-mapping-quality", 
          "short form argument": "-j"
        }, 
        {
          "data type": "string", 
          "description": "Additional bam file.", 
          "long form argument": "--in-add", 
          "short form argument": "-ia"
        }, 
        {
          "data type": "string", 
          "description": "The input paired end ann file.", 
          "long form argument": "--ann-paired-end", 
          "short form argument": "-ap"
        }, 
        {
          "data type": "integer", 
          "description": "Iterate no more than N times during genotyping step. default: 25.", 
          "long form argument": "--genotyping-max-iterations", 
          "short form argument": "-gmi"
        }, 
        {
          "data type": "integer", 
          "description": "Allow complex alleles with contiguous embedded matches of up to this length.", 
          "long form argument": "--max-complex-gap", 
          "short form argument": "-E"
        }, 
        {
          "data type": "integer", 
          "description": "Require at least this count of observations supporting an alternate allele within a single individual in order to evaluate the position.  default: 1", 
          "long form argument": "--min-alternate-count", 
          "short form argument": "-mac"
        }, 
        {
          "data type": "string", 
          "description": "The input single end ann file.", 
          "long form argument": "--ann-single-end", 
          "short form argument": "-as"
        }, 
        {
          "data type": "flag", 
          "description": "Ignore SNP alleles.", 
          "long form argument": "--no-snps", 
          "short form argument": "-I"
        }, 
        {
          "data type": "string", 
          "description": "Input dag.", 
          "long form argument": "--dag", 
          "short form argument": "-d"
        }, 
        {
          "data type": "string", 
          "description": "The fasta reference", 
          "long form argument": "--fasta-reference", 
          "short form argument": "-r"
        }, 
        {
          "data type": "string", 
          "description": "The FASTA reference index file.", 
          "long form argument": "--fasta-index", 
          "short form argument": "-fx"
        }, 
        {
          "data type": "string", 
          "description": "Limit analysis to targets listed in the BED-format FILE.", 
          "long form argument": "--targets", 
          "short form argument": "-t"
        }, 
        {
          "data type": "flag", 
          "description": "Use dups.", 
          "long form argument": "--dups", 
          "short form argument": "-dp"
        }, 
        {
          "data type": "integer", 
          "description": "Require at least this count of observations supporting an alternate allele within the total population in order to use the allele in analysis.  default: 1", 
          "long form argument": "--min-alternate-total", 
          "short form argument": "-mat"
        }, 
        {
          "data type": "integer", 
          "description": "Limit posterior integration to samples where the second-best genotype likelihood is no more than log(N) from the highest genotype likelihood for the sample.  default: ~unbounded.", 
          "long form argument": "--genotype-variant-threshold", 
          "short form argument": "-S"
        }
      ], 
      "description": "parallel calling. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description"
    }, 
    "two-freebayes": {
      "arguments": [
        {
          "data type": "string", 
          "description": "Another filtered bam", 
          "long form argument": "--filtered", 
          "short form argument": "-fi"
        }, 
        {
          "data type": "string", 
          "description": "The input BAM files.", 
          "long form argument": "--in", 
          "short form argument": "-i"
        }, 
        {
          "data type": "string", 
          "description": "The filtered BAM file.", 
          "long form argument": "--filter-bam", 
          "short form argument": "-f"
        }, 
        {
          "data type": "string", 
          "description": "An additional test BAM.", 
          "long form argument": "--bonus-bam", 
          "short form argument": "-b"
        }
      ], 
      "description": "parallel calling"
    }
  }
}