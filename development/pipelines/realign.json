{
  "id" : "realign",
  "description" : "parallel calling. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description. This is a very long description",
  "categories" : ["Variant-discovery", "Variant-graph"],

  "pipeline tasks" : [
    {
      "task" : "workhorse",
      "pipeline" : "two-freebayes"
    },
    {
      "task" : "realign",
      "tool" : "glia",
      "include in reduced plot" : true
    }
  ],

  "import arguments" : "workhorse.call1.call",

  "arguments" : {
    "Inputs" : [
      {
        "long form argument" : "--fasta-reference",
        "short form argument" : "-r",
        "description" : "The fasta reference",
        "node id" : "workhorse.align.fasta"
      },
      {
        "long form argument" : "--read-archive",
        "short form argument" : "-a",
        "description" : "The input read archive.",
        "node id" : "workhorse.align.archive"
      },
      {
        "long form argument" : "--ann-single-end",
        "short form argument" : "-as",
        "description" : "The input single end ann file.",
        "node id" : "workhorse.align.annse"
      },
      {
        "long form argument" : "--ann-paired-end",
        "short form argument" : "-ap",
        "description" : "The input paired end ann file.",
        "node id" : "workhorse.align.annpe"
      },
      {
        "long form argument" : "--dag",
        "short form argument" : "-d",
        "description" : "Input dag.",
        "node id" : "dag"
      },
      {
        "long form argument" : "--in",
        "short form argument" : "-i",
        "description" : "The input bam files(s).",
        "node id" : "bam"
      },
      {
        "long form argument" : "--in-add",
        "short form argument" : "-ia",
        "description" : "Additional bam file.",
        "node id" : "workhorse.additional-bam",
        "required" : true
      },
      {
        "long form argument" : "--build-bam",
        "short form argument" : "-bb",
        "description" : "Additional bam file for build bam.  A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise. A whole bunch of noise.",
        "node id" : "workhorse.bam-to-filter"
      }
    ],

    "Options" : [
      {
        "long form argument" : "--dups",
        "short form argument" : "-dp",
        "description" : "Use dups.",
        "required" : true,
        "node id" : "dups"
      },
      {
        "long form argument" : "--region",
        "short form argument" : "-rg",
        "description" : "Genomic region.",
        "node id" : "workhorse.call1.region"
      }
    ]
  },

  "unique graph nodes" : [
    {
      "id" : "dag",
      "task" : "realign",
      "task argument" : "--vcf"
    },
    {
      "id" : "dups",
      "task" : "workhorse.call1.call",
      "task argument" : "--use-duplicate-reads"
    }
  ],

  "shared graph nodes" : [
    {
      "id" : "reference",
      "arguments sharing node" : [
        {
          "task" : "workhorse.align",
          "node id" : "fasta"
        },
        {
          "task" : "workhorse.call1.call",
          "task argument" : "--fasta-reference"
        },
        {
          "task" : "workhorse.call2.call",
          "task argument" : "--fasta-reference"
        },
        {
          "task" : "realign",
          "task argument" : "--fasta-reference"
        }
      ]
    },
    {
      "id" : "bam",
      "arguments sharing node" : [
        {
          "task" : "workhorse",
          "node id" : "collect-bam"
        },
        {
          "task" : "realign",
          "task argument" : "--in"
        }
      ]
    },
    {
      "id" : "vcf-to-glia",
      "arguments sharing node" : [
        {
          "task" : "workhorse.compress",
          "task argument" : "--out"
        },
        {
          "task" : "realign",
          "task argument" : "--vcf"
        }
      ]
    }
  ],

  "parameter sets" : [
    {
      "id" : "default",
      "description" : "Default parameter set requires user to input all input filenames.",
      "data" : [
        {
          "id" : "in",
          "node" : "bam",
          "values" : ["glia-example.bam"]
        }
      ]
    },

    {
      "id" : "test",
      "description" : "Test parameter set.",
      "data" : [
        {
          "id" : "in",
          "node" : "bam",
          "values" : ["test-glia-ps.bam"]
        }
      ]
    }
  ]
}
