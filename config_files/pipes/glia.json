{
  "id" : "glia",
  "configuration type" : "pipeline",
  "description" : "Realign a BAM file against the variant graph with glia and call variants from the realigned BAM. In addition, this pipeline feeds the VCF used for creating the variant graph to Freebayes in the calling step, to force Freebayes to consider all of the alleles when genotyping the new sample.",
  "categories" : ["Alignment", "Variant-graph"],

  "pipeline tasks" : [
    {
      "task" : "merge-bam",
      "tool" : "bamtools-merge",
      "output to stream" : true
    },
    {
      "task" : "realign",
      "tool" : "glia",
      "input is stream" : true,
      "output to stream" : true
    },
    {
      "task" : "sort",
      "tool" : "samtools-sort",
      "input is stream" : true,
      "output to stream" : true
    },
    {
      "task" : "call",
      "pipeline" : "freebayes",
      "input is stream" : true
    }
  ],

  "arguments" : {
    "Inputs" : [
      {
        "description" : "The input BAM file(s).",
        "long form argument" : "--in",
        "short form argument" : "-i",
        "node id" : "input"
      },
      {
        "description" : "The FASTA reference genome.",
        "long form argument" : "--fasta-reference",
        "short form argument" : "-r",
        "node id" : "reference"
      },
      {
        "description" : "The genome DAG, BGZIP'ed (.vcf.gz) and tabix-indexed (.tbi).",
        "long form argument" : "--vcf",
        "short form argument" : "-v",
        "node id" : "dag"
      }
    ],

    "Outputs" : [
      {
        "description" : "The output recalled, normalized VCF file.",
        "long form argument" : "--out",
        "short form argument" : "-o",
        "node id" : "call.output"
      }
    ],

    "Options" : [
      {
        "description" : "The genomic region for consideration.",
        "long form argument" : "--region",
        "short form argument" : "-rg",
        "required" : true,
        "node id" : "region"
      },
      {
        "description" : "Do not attempt streaming sort of alignments.  This can save memory in high coverage areas, but will require sort of BAM file before it can be used for variant calling.",
        "long form argument" : "--unsorted-output",
        "short form argument" : "-u",
        "node id" : "unsorted"
      },
      {
        "description" : "Number of bp of window to assemble from VCF for realignment.",
        "long form argument" : "--realignment-window",
        "short form argument" : "-rw",
        "node id" : "window"
      },
      {
        "description" : "If sum of qualities of soft clipped bases is >= N, realign (default ~inf).",
        "long form argument" : "--soft-clip-qsum-threshold",
        "short form argument" : "-s",
        "node id" : "soft-clip-threshold"
      },
      {
        "description" : "If sum of qualities of mismatched bases is >= N, realign (default ~inf).",
        "long form argument" : "--mismatch-qsum-threshold",
        "short form argument" : "-mqt",
        "node id" : "mismatch-threshold"
      },
      {
        "description" : "Accept realignment if number of gaps is < N.",
        "long form argument" : "--gap-count-max",
        "short form argument" : "-gcm",
        "node id" : "gap-count"
      }
    ]
  },

  "unique graph nodes" : [
    {
      "id" : "input",
      "task" : "merge-bam",
      "task argument" : "--in"
    },
    {
      "id" : "region",
      "task" : "merge-bam",
      "task argument" : "--region"
    },
    {
      "id" : "realign-bam",
      "task" : "realign",
      "task argument" : "--realign-bam"
    },
    {
      "id" : "reverse-complement",
      "task" : "realign",
      "task argument" : "--reverse-complement"
    },
    {
      "id" : "unsorted",
      "task" : "realign",
      "task argument" : "--unsorted-output"
    },
    {
      "id" : "window",
      "task" : "realign",
      "task argument" : "--realignment-window"
    },
    {
      "id" : "soft-clip-threshold",
      "task" : "realign",
      "task argument" : "--soft-clip-qsum-threshold"
    },
    {
      "id" : "mismatch-threshold",
      "task" : "realign",
      "task argument" : "--mismatch-qsum-threshold"
    },
    {
      "id" : "gap-count",
      "task" : "realign",
      "task argument" : "--gap-count-max"
    },
    {
      "id" : "sort-to-stdout",
      "task" : "sort",
      "task argument" : "--output-to-stdout"
    }
  ],

  "shared graph nodes" : [
    {
      "id" : "merged-bam",
      "arguments sharing node" : [
        {
          "task" : "merge-bam",
          "task argument" : "--out"
        },
        {
          "task" : "realign",
          "task argument" : "--in"
        }
      ]
    },
    {
      "id" : "reference",
      "arguments sharing node" : [
        {
          "task" : "realign",
          "task argument" : "--fasta-reference"
        },
        {
          "task" : "call",
          "node id" : "reference"
        }
      ]
    },
    {
      "id" : "dag",
      "arguments sharing node" : [
        {
          "task" : "realign",
          "task argument" : "--vcf"
        },
        {
          "task" : "call",
          "node id" : "haplotype-alleles"
        }
      ]
    },
    {
      "id" : "realigned-bam",
      "arguments sharing node" : [
        {
          "task" : "realign",
          "task argument" : "--out"
        },
        {
          "task" : "sort",
          "task argument" : "--in"
        }
      ]
    },
    {
      "id" : "sorted-bam",
      "arguments sharing node" : [
        {
          "task" : "sort",
          "task argument" : "--out"
        },
        {
          "task" : "call",
          "node id" : "bam"
        }
      ]
    }
  ],

  "parameter sets" : [
    {
      "id" : "default",
      "description" : "The default instance sets all the parameters for the pipeline to run.",
      "data" : [
        {
          "id" : "realign",
          "node" : "realign-bam",
          "values" : ["set"]
        },
        {
          "id" : "reverse complement",
          "node" : "reverse-complement",
          "values" : ["set"]
        },
        {
          "id" : "unsorted output",
          "node" : "unsorted",
          "values" : ["set"]
        },
        {
          "id" : "window",
          "node" : "window",
          "values" : [1500]
        },
        {
          "id" : "soft-clip",
          "node" : "soft-clip-threshold",
          "values" : [200]
        },
        {
          "id" : "mismatch",
          "node" : "mismatch-threshold",
          "values" : [200]
        },
        {
          "id" : "gap",
          "node" : "gap-count",
          "values" : [4]
        },
        {
          "id" : "sort",
          "node" : "sort-to-stdout",
          "values" : ["set"]
        }
      ]
    },

    {
      "id" : "test",
      "description" : "Test parameter set for the test harness.",
      "data" : [
        {
          "id" : "input",
          "node" : "input",
          "values" : ["$(RESOURCES)/tutorial/current/mutated_genome.bam"]
        },
        {
          "id" : "reference",
          "node" : "reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment.fa"]
        },
        {
          "id" : "variant-input",
          "node" : "dag",
          "values" : ["$(RESOURCES)/tutorial/current/mutated_genome.vcf.gz"]
        },
        {
          "id" : "region",
          "node" : "region",
          "values" : ["20:1..50000", "20:50000..100000"]
        },
        {
          "id" : "output",
          "node" : "call.output",
          "values" : ["adjudicated.vcf.gz"]
        }
      ]
    },

    {
      "id" : "human",
      "description" : "Parameter set for the human genome.",
      "data" : [
        {
          "id" : "reference",
          "node" : "reference",
          "values" : ["$(RESOURCES)/homo_sapiens/current/human_reference_v37_decoys.fa"]
        }
      ]
    }
  ]
}
