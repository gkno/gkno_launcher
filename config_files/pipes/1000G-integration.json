{
  "description" : ".",
  "hide in help" : true,
  "developmental" : true,

  "tasks" : {
    "merge-bam" : {
      "tool" : "bamtools-merge",
      "output to stream" : true
    },
    "graph-align" : {
      "tool" : "glia"
    }
  },

  "nodes" : [
    {
      "ID" : "bam",
      "description" : "The input BAM file.",
      "long form argument" : "--bam",
      "short form argument" : "-b",
      "tasks" : {
        "merge-bam" : "--in"
      }
    },
    {
      "ID" : "bams",
      "description" : "The list of input BAM files.",
      "long form argument" : "--bam-list",
      "short form argument" : "-l",
      "tasks" : {
        "merge-bam" : "--in-list"
      }
    },
    {
      "ID" : "expanded regions",
      "description" : "The list of expanded regions.",
      "long form argument" : "--region-list",
      "short form argument" : "-rl",
      "required" : true,
      "tasks" : {
        "merge-bam" : "--region-list-single"
      }
    },
    {
      "ID" : "merge output",
      "description" : "Pipe merged BAM to glia.",
      "tasks" : {
        "merge-bam" : "--out",
        "graph-align" : "--bam"
      }
    },
    {
      "ID" : "fasta",
      "description" : "The FASTA reference genome.",
      "long form argument" : "--fasta-reference",
      "short form argument" : "-r",
      "tasks" : {
        "graph-align" : "--fasta-reference"
      }
    },
    {
      "ID" : "realign",
      "description" : "Realign the BAM stream on stdin to the VCF file, adjusting position and flattening alignments back into the reference space where realignment to the graph provides better quality.",
      "long form argument" : "--realign-bam",
      "short form argument" : "-rb",
      "tasks" : {
        "graph-align" : "--realign-bam"
      }
    },
    {
      "ID" : "reverse",
      "description" : "Report the reverse complement if it provides a better alignment.",
      "long form argument" : "--reverse-complement",
      "short form argument" : "-rc",
      "tasks" : {
        "graph-align" : "--reverse-complement"
      }
    },
    {
      "ID" : "unsorted",
      "description" : "Do not attempt streaming sort of alignments.  This can save memory in high coverage areas, but will require sort of BAM file before it can be used for variant calling.",
      "long form argument" : "--unsorted-output",
      "short form argument" : "-u",
      "tasks" : {
        "graph-align" : "--unsorted-output"
      }
    },
    {
      "ID" : "window",
      "description" : "Number of bp of window to assemble from VCF for realignment.",
      "long form argument" : "--realignment-window",
      "short form argument" : "-rw",
      "tasks" : {
        "graph-align" : "--realignment-window"
      }
    },
    {
      "ID" : "softclip threshold",
      "description" : "If sum of qualities of soft clipped bases is >= N, realign (default ~inf).",
      "long form argument" : "--soft-clip-qsum-threshold",
      "short form argument" : "-s",
      "tasks" : {
        "graph-align" : "--soft-clip-qsum-threshold"
      }
    },
    {
      "ID" : "mismatch threshold",
      "description" : "If sum of qualities of mismatched bases is >= N, realign (default ~inf).",
      "long form argument" : "--mismatch-qsum-threshold",
      "short form argument" : "-mqt",
      "tasks" : {
        "graph-align" : "--mismatch-qsum-threshold"
      }
    },
    {
      "ID" : "gap count",
      "description" : "Accept realignment if number of gaps is < N.",
      "long form argument" : "--gap-count-max",
      "short form argument" : "-gcm",
      "tasks" : {
        "graph-align" : "--gap-count-max"
      }
    },
    {
      "ID" : "vcf",
      "description" : "The genome DAG, BGZIP'ed (.vcf.gz) and tabix-indexed (.tbi).",
      "long form argument" : "--vcf",
      "short form argument" : "-v",
      "tasks" : {
        "graph-align" : "--vcf"
      }
    }
  ],

  "instances" : [
    {
      "ID" : "default",
      "description" : "The default instance sets all the parameters for the pipeline to run.",
      "nodes" : [
        {
          "ID" : "realign",
          "argument" : "--realign-bam",
          "values" : ["set"]
        },
        {
          "ID" : "reverse complement",
          "argument" : "--reverse-complement",
          "values" : ["set"]
        },
        {
          "ID" : "unsorted output",
          "argument" : "--unsorted-output",
          "values" : ["set"]
        },
        {
          "ID" : "window",
          "argument" : "--realignment-window",
          "values" : [1000]
        },
        {
          "ID" : "soft-clip threshold",
          "argument" : "--soft-clip-qsum-threshold",
          "values" : [200]
        },
        {
          "ID" : "mismatch threshold",
          "argument" : "--mismatch-qsum-threshold",
          "values" : [200]
        },
        {
          "ID" : "gap count",
          "argument" : "--gap-count-max",
          "values" : [4]
        }
      ]
    }
  ]
}
