{
  "id" : "glia",
  "description" : "Perform local graph alignment.",
  "experimental" : true,
  "categories" : ["BAM-processing", "Aligners", "Variant-graph", "Marthlab-software"],
  "tools" : ["glia"],
  "path" : "glia",
  "executable" : "glia",
  "input is stream" : true,
  "help" : "--help|-h",
  "arguments" : {
    "inputs" : [
      {
        "description" : "The input bam.",
        "long form argument" : "--in",
        "short form argument" : "-i",
        "command line argument" : "--in",
        "required" : true,
        "if input is stream" : "do not include",
        "is stream" : true,
        "data type" : "string",
        "extensions" : [".bam"]
      },
      {
        "description" : "The reference sequence for alignment.",
        "long form argument" : "--fasta-reference",
        "short form argument" : "-r",
        "command line argument" : "--fasta-reference",
        "required" : true,
        "data type" : "string",
        "extensions" : [".fa", ".fasta"]
      },
      {
        "description" : "The genome DAG, BGZIP'ed (.vcf.gz) and tabix-indexed (.tbi).",
        "long form argument" : "--vcf",
        "short form argument" : "-v",
        "command line argument" : "--vcf-file",
        "required" : true,
        "data type" : "string",
        "extensions" : [".vcf.gz"]
      },
      {
        "description" : "The genome DAG index.",
        "long form argument" : "--index",
        "short form argument" : "-x",
        "command line argument" : "--vcf-index",
        "required" : true,
        "data type" : "string",
        "extensions" : [".tbi"],
        "hide in help" : true,
        "modify argument name on command line" : "omit",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--vcf",
          "modify extension" : "append"
        }
      }
    ],
  
    "outputs" : [
      {
        "description" : "The output file.",
        "long form argument" : "--out",
        "short form argument" : "-o",
        "command line argument" : "-out",
        "required" : true,
        "data type" : "string",
        "extensions" : [".bam"],
        "modify argument name on command line" : "stdout",
        "if output to stream" : "do not include",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--in",
          "modify extension" : "replace",
          "modify text" : [
            {
              "add text" : ["_glia"]
            }
          ]
        }
      }
    ],
  
    "Smith-Waterman parameters" : [
      {
        "description" : "The alignment match score (default 10).",
        "long form argument" : "--match",
        "short form argument" : "-m",
        "command line argument" : "--match",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "The alignment mismatch score (default -10).",
        "long form argument" : "--mismatch",
        "short form argument" : "-ms",
        "command line argument" : "--mismatch",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Gap open penalty (default 3).",
        "long form argument" : "--gap-open",
        "short form argument" : "-go",
        "command line argument" : "--gap-open",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Gap extension penalty (default 1).",
        "long form argument" : "--gap-extend",
        "short form argument" : "-ge",
        "command line argument" : "--gap-extend",
        "data type" : "integer",
        "extensions" : ["no extension"]
      }
    ],

    "Single-read alignment parameters" : [
      {
        "description" : "Target genomic region for alignment, e.g. chr2:1-20",
        "long form argument" : "--region",
        "short form argument" : "-rg",
        "command line argument" : "--target",
        "data type" : "string",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Write DAG generated from variants to stdout.",
        "long form argument" : "--display-dag",
        "short form argument" : "-dd",
        "command line argument" : "--display-dag",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Write alignment matrix results to stdout.",
        "long form argument" : "--display-backtrace",
        "short form argument" : "-dt",
        "command line argument" : "--display-backtrace",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Same as --display-backtrace but also for nodes which are not traced.",
        "long form argument" : "--display-all-nodes",
        "short form argument" : "-dn",
        "command line argument" : "--display-all-nodes",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Enable debugging output.",
        "long form argument" : "--debug-glia",
        "short form argument" : "-dg",
        "command line argument" : "--display-all-nodes",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Report the reverse complement if it provides a better alignment.",
        "long form argument" : "--reverse-complement",
        "short form argument" : "-rc",
        "command line argument" : "--reverse-complement",
        "data type" : "flag",
        "extensions" : ["no extension"]
      }
    ],

    "local realignment parameters" : [
      {
        "description" : "The input VCF is normalized so that overlapping variants are represented in a single record (as by vcflib/bin/vcfcreatemulti). Do not decompose variant representation in VCF file to construct graph.",
        "long form argument" : "--flat-input-vcf",
        "short form argument" : "-f",
        "command line argument" : "--flat-input-vcf",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Number of bp of window to assemble from VCF for realignment.",
        "long form argument" : "--realignment-window",
        "short form argument" : "-rw",
        "command line argument" : "--realignment-window",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Do not attempt streaming sort of alignments.  This can save memory in high coverage areas, but will require sort of BAM file before it can be used for variant calling.",
        "long form argument" : "--unsorted-output",
        "short form argument" : "-u",
        "command line argument" : "--unsorted-output",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {
        "description" : "If sum of qualities of soft clipped bases is >= N, realign (default ~inf).",
        "long form argument" : "--soft-clip-qsum-threshold",
        "short form argument" : "-s",
        "command line argument" : "--soft-clip-qsum-threshold",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "If sum of qualities of mismatched bases is >= N, realign (default ~inf).",
        "long form argument" : "--mismatch-qsum-threshold",
        "short form argument" : "-mqt",
        "command line argument" : "--mismatch-qsum-threshold",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "If the count of gaps is >= N, realign (default: ~inf).",
        "long form argument" : "--gap-count-threshold",
        "short form argument" : "-gc",
        "command line argument" : "--gap-count-threshold",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "If the total length of gaps is >= N, realign (default: ~inf).",
        "long form argument" : "--gap-length-threshold",
        "short form argument" : "-gl",
        "command line argument" : "--gap-length-threshold",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Accept realignment if qsum of softclips is < N.",
        "long form argument" : "--soft-clip-qsum-max",
        "short form argument" : "-sc",
        "command line argument" : "--soft-clip-qsum-max",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Accept realignment if qsom of mismatches is < N.",
        "long form argument" : "--mismatch-qsum-max",
        "short form argument" : "-mq",
        "command line argument" : "--mismatch-qsum-max",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Accept realignment if number of gaps is < N.",
        "long form argument" : "--gap-count-max",
        "short form argument" : "-gcm",
        "command line argument" : "--gap-count-max",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {
        "description" : "Use this many bp of dummy sequence when flattening large insertions into reference coordinates (default: 2)",
        "long form argument" : "--flatten-rank",
        "short form argument" : "-fr",
        "command line argument" : "--flatten-rank",
        "data type" : "integer",
        "extensions" : ["no extension"]
      }
    ],

    "hidden options" : [
      {
        "description" : "Realign the BAM stream on stdin to the VCF file, adjusting position and flattening alignments back into the reference space where realignment to the graph provides better quality.",
        "long form argument" : "--realign-bam",
        "short form argument" : "-rb",
        "command line argument" : "--realign-bam",
        "required" : true,
        "data type" : "flag",
        "hide in help" : true,
        "extensions" : ["no extension"]
      }
    ]
  },

  "argument order" : [
    "--in",
    "--realign-bam",
    "--fasta-reference",
    "--vcf",
    "--index",
    "--match",
    "--mismatch",
    "--gap-open",
    "--gap-extend",
    "--region",
    "--display-dag",
    "--display-backtrace",
    "--display-all-nodes",
    "--debug-glia",
    "--reverse-complement",
    "--flat-input-vcf",
    "--realignment-window",
    "--unsorted-output",
    "--soft-clip-qsum-threshold",
    "--mismatch-qsum-threshold",
    "--gap-count-threshold",
    "--gap-length-threshold",
    "--soft-clip-qsum-max",
    "--mismatch-qsum-max",
    "--gap-count-max",
    "--flatten-rank",
    "--out"
  ],

  "parameter sets" : [
    {
      "ID" : "default",
      "description" : "Default parameter set requires the users input for all files.",
      "nodes" : [
        {
          "ID" : "realign",
          "argument" : "--realign-bam",
          "values" : ["set"]
        },
        {
          "ID" : "reverse complement",
          "argument" : "--reverse-complement",
          "values" : ["set"]
        },
        {
          "ID" : "unsorted output",
          "argument" : "--unsorted-output",
          "values" : ["set"]
        },
        {
          "ID" : "window",
          "argument" : "--realignment-window",
          "values" : [1500]
        },
        {
          "ID" : "soft-clip",
          "argument" : "--soft-clip-qsum-threshold",
          "values" : [200]
        },
        {
          "ID" : "mismatch",
          "argument" : "--mismatch-qsum-threshold",
          "values" : [200]
        },
        {
          "ID" : "gap",
          "argument" : "--gap-count-max",
          "values" : [4]
        }
      ]
    },

    {
      "ID" : "human",
      "description" : "Parameter set for the human genome.",
      "nodes" : [
        {
          "ID" : "ref",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/homo_sapiens/current/human_reference_v37_decoys.fa"]
        }
      ]
    },

    {
      "ID" : "test",
      "description" : "Parameter set for use with the test-harness.",
      "nodes" : [
        {
          "ID" : "bam",
          "argument" : "--in",
          "values" : ["$(RESOURCES)/tutorial/current/mutated_genome.bam"]
        },
        {
          "ID" : "vcf",
          "argument" : "--vcf",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment.dbSNP.snps.sites.vcf.gz"]
        },
        {
          "ID" : "fasta",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment_moblist.fa"]
        },
        {
          "ID" : "region",
          "argument" : "--region",
          "values" : ["20"]
        },
        {
          "ID" : "unsorted",
          "argument" : "--unsorted-output",
          "values" : ["set"]
        }
      ]
    }
  ]
}
