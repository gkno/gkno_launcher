{
  "id" : "bamtools-filter",
  "configuration type" : "tool",
  "description" : "Filter a BAM file on many parameters or combinations of parameters.",
  "web page" : {
    "authors" : ["Derek Barnett"],
    "emails" : ["derekwbarnett@gmail.com"],
    "papers" : ["Barnett D. W., et al. BamTools: a C++ API and toolkit for analyzing and managing BAM files. Bioinformatics 2011;27:1691-1692."],
    "tool" : "bamtools",
    "web_pages" : ["https://github.com/pezmaster31/bamtools"]
  },
  "categories" : ["BAM-processing", "Bamtools", "Marthlab-software"],
  "tools" : ["bamtools"],
  "path" : "bamtools/bin",
  "executable" : "bamtools",
  "modifier" : "filter",
  "arguments" : {
    "Inputs" : [
      {
        "description" : "The input BAM file.",
        "long form argument" : "--in",
        "short form argument" : "-i",
        "command line argument" : "-in",
        "required" : true,
        "data type" : "string",
        "extensions" : ["bam"],
        "allow multiple values" : true
      },
      {
        "description" : "the filter script file (see bamtools documentation for more information).",
        "long form argument" : "--script",
        "short form argument" : "-s",
        "command line argument" : "-script",
        "extensions" : ["json"],
        "data type" : "string"
      }
    ],

    "Outputs" : [
      {
        "description" : "the output BAM file.",
        "long form argument" : "--out",
        "short form argument" : "-o",
        "command line argument" : "-out",
        "required" : true,
        "data type" : "string",
        "extensions" : ["bam"],
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--in",
          "modify extension" : "replace",
          "modify text" : [
            {
              "add text" : ["_filtered"]
            }
          ]
        }
      }
    ],

    "Options" : [
      {
        "description" : "only read data from this genomic region.",
        "long form argument" : "--region",
        "short form argument" : "-rg",
        "command line argument" : "-region",
        "data type" : "string",
        "replace substring" : [
          {
            "replace" : "-",
            "with" : ".."
          }
        ]
      }
    ],

    "General filters" : [
      {
        "description" : "Keep reads with this *exact* alignment flag (for more detailed queries, see 'Alignment flag filters').",
        "long form argument" : "--alignment-flag",
        "short form argument" : "-a",
        "command line argument" : "-alignmentFlag",
        "data type" : "integer"
      },
      {
        "description" : "Keep reads with insert size that matches pattern.",
        "long form argument" : "--insert-size",
        "short form argument" : "-z",
        "command line argument" : "-insertSize",
        "data type" : "string"
      },
      {
        "description" : "Keep reads with length that matches pattern.",
        "long form argument" : "--length",
        "short form argument" : "-g",
        "command line argument" : "-length",
        "data type" : "string"
      },
      {
        "description" : "Keep reads with mapping qualities that match pattern.",
        "long form argument" : "--mapping-quality",
        "short form argument" : "-mq",
        "command line argument" : "-mapQuality",
        "data type" : "string"
      },
      {
        "description" : "Keep reads with name that matches pattern.",
        "long form argument" : "--name",
        "short form argument" : "-n",
        "command line argument" : "-name",
        "data type" : "string"
      },
      {
        "description" : "Keep reads with motif that matches pattern.",
        "long form argument" : "--query-bases",
        "short form argument" : "-q",
        "command line argument" : "-queryBases",
        "data type" : "string"
      },
      {
        "description" : "Keep reads with this key=>value pair.",
        "long form argument" : "--tag",
        "short form argument" : "-t",
        "command line argument" : "-tag",
        "data type" : "string"
      }
    ],

    "Alignment flag filters" : [
      {
        "description" : "Keep only alignments that are marked as duplicate?",
        "long form argument" : "--is-duplicate",
        "short form argument" : "-id",
        "command line argument" : "-isDuplicate",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments that failed QC?",
        "long form argument" : "--is-failed-qc",
        "short form argument" : "-if",
        "command line argument" : "-isFailedQC",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments marked as first mate?",
        "long form argument" : "--is-first-mate",
        "short form argument" : "-ifm",
        "command line argument" : "-isFirstMate",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments that were mapped?",
        "long form argument" : "--is-mapped",
        "short form argument" : "-im",
        "command line argument" : "-isMapped",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments with mates that mapped.",
        "long form argument" : "--is-mate-mapped",
        "short form argument" : "-imm",
        "command line argument" : "-isMateMapped",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments with mate on reverese strand?",
        "long form argument" : "--is-mate-reverse-strand",
        "short form argument" : "-imr",
        "command line argument" : "-isMateReverseStrand",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments that were sequenced as paired?",
        "long form argument" : "--is-paired",
        "short form argument" : "-ipr",
        "command line argument" : "-isPaired",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments marked as primary?",
        "long form argument" : "--is-primary-alignment",
        "short form argument" : "-ipa",
        "command line argument" : "-isPrimaryAlignment",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments that passed PE resolution?",
        "long form argument" : "--is-proper-pair",
        "short form argument" : "-ipp",
        "command line argument" : "-isProperPair",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments on reverse strand?",
        "long form argument" : "--is-reverse-strand",
        "short form argument" : "-ir",
        "command line argument" : "-isReverseStrand",
        "data type" : "bool"
      },
      {
        "description" : "Keep only alignments marked as second mate?",
        "long form argument" : "--is-second-mate",
        "short form argument" : "-ism",
        "command line argument" : "-isSecondMate",
        "data type" : "bool"
      },
      {
        "description" : "Keep only singletons?",
        "long form argument" : "--is-singleton",
        "short form argument" : "-isi",
        "command line argument" : "-isSingleton",
        "data type" : "bool"
      }
    ]
  },

  "parameter sets" : [
    {
      "id" : "default",
      "description" : "Default parameter set requires the users input for all files.",
      "data" : [
      ]
    },

    {
      "id" : "test",
      "description" : "Parameter set for use with the test-harness.",
      "data" : [
        {
          "id" : "Input BAM file",
          "argument" : "--in",
          "values" : ["$(RESOURCES)/tutorial/current/mutated_genome.bam"]
        }
      ]
    }
  ]
}
