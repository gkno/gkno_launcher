{
  "id" : "recab",
  "description" : "Recalibrate base qualities in a BAM file (University of Michigan).",
  "category" : "alignment processing",
  "tools" : ["bamUtil", "libStatGen"],
  "path" : "bamUtil/bin",
  "executable" : "bam",
  "modifier" : "recab",
  "help" : "--help|-h",
  "arguments" : {
    "inputs" : [
      {    
        "description" : "Input BAM file name.",
        "long form argument" : "--in",
        "short form argument" : "-i",
        "command line argument" : "--in",
        "required" : true,
        "data type" : "string",
        "extensions" : [".bam"]
      },
      {    
        "description" : "Reference file name.",
        "long form argument" : "--fasta-reference",
        "short form argument" : "-r",
        "command line argument" : "--refFile",
        "required" : true,
        "data type" : "string",
        "extensions" : [".fa", ".fasta"]
      },
      {    
        "description" : "dbsnp file of positions.",
        "long form argument" : "--dbsnp",
        "short form argument" : "-d",
        "command line argument" : "--dbsnp",
        "data type" : "string",
        "extensions" : [".vcf"]
      }
    ],

    "outputs" : [
      {    
        "description" : "Output recalibrated BAM file name.",
        "long form argument" : "--out",
        "short form argument" : "-o",
        "command line argument" : "--out",
        "required" : true,
        "data type" : "string",
        "extensions" : [".bam"],
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--in",
          "modify extension" : "replace",
          "modify text" : [
            {
              "add text" : ["_recalibrated"]
            }
          ]
        }
      }
    ],

    "options" : [
      {    
        "description" : "Log and summary statistics (default: [outfile].log, or stderr if --out starts with '-').",
        "long form argument" : "--log",
        "short form argument" : "-l",
        "command line argument" : "--log",
        "data type" : "string",
        "extensions" : [".log"]
      },
      {    
        "description" : "Do not expect an EOF block on a bam file.",
        "long form argument" : "--no-eof",
        "short form argument" : "-n",
        "command line argument" : "--noeof",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Minimum base quality of bases to recalibrate (default: 5).",
        "long form argument" : "--minimum-base-quality",
        "short form argument" : "-minq",
        "command line argument" : "--minBaseQual",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Maximum recalibrated base quality (default: 50).",
        "long form argument" : "--maximum-base-quality",
        "short form argument" : "-maxq",
        "command line argument" : "--maxBaseQual",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Blended model weight.",
        "long form argument" : "--blended",
        "short form argument" : "-b",
        "command line argument" : "--blended",
        "data type" : "integer",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Check if the logistic regression model fits the data overriden by fast, but automatically applied by useLogReg.",
        "long form argument" : "--fit-model",
        "short form argument" : "-f",
        "command line argument" : "--fitModel",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "use a compact representation that only allows:|* at most 256 Read Groups|* maximum quality 63|* at most 127 cycles|overrides fitModel, but is overridden by useLogReg uses up to about 2.25G more memory than running without --fast.",
        "long form argument" : "--fast",
        "short form argument" : "-t",
        "command line argument" : "--fast",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Do not exclude entries where the previous base is in dbsnp when building the recalibration table. By default they are excluded from the table.",
        "long form argument" : "--keep-previous-dbsnp",
        "short form argument" : "-kp",
        "command line argument" : "--keepPrevDbsnp",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Do not exclude entries where the previous base is not adjacent (not a Cigar M/X/=) when building the recalibration table.  By default they are excluded from the table (except the first cycle).",
        "long form argument" : "--keep-previous-non-adjacent",
        "short form argument" : "-kn",
        "command line argument" : "--keepPrevNonAdjacent",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Use logistic regression calculated quality for the new quality automatically applies fitModel and overrides fast.",
        "long form argument" : "--use-logistic-regression",
        "short form argument" : "-u",
        "command line argument" : "--useLogReg",
        "data type" : "flag",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Tag to get the starting base quality (default is to get it from the Quality field).",
        "long form argument" : "--quality-field",
        "short form argument" : "-q",
        "command line argument" : "--qualField",
        "data type" : "string",
        "extensions" : ["no extension"]
      },
      {    
        "description" : "Tag to store the previous quality into.",
        "long form argument" : "--store-quality-tag",
        "short form argument" : "-s",
        "command line argument" : "--storeQualTag",
        "data type" : "string",
        "extensions" : ["no extension"]
      }
    ]
  },

  "instances" : [
    {
      "ID" : "default",
      "description" : "Default instance requires the users input for all files.",
      "nodes" : [
      ]
    },

    {
      "ID" : "test",
      "description" : "Instance for use with the test-harness.",
      "nodes" : [
        {
          "ID" : "BAM1",
          "argument" : "--in",
          "values" : ["$(RESOURCES)/tutorial/current/mutated_genome.bam"]
        },
        {
          "ID" : "reference",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment.fa"]
        },
        {
          "ID" : "output path",
          "argument" : "--output-path",
          "values" : ["./"]
        }
      ]
    }
  ]
}
