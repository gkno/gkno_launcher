{
  "id" : "freebayes",
  "configuration type" : "tool",
  "web page" : {
    "authors" : ["Erik Garrison"],
    "citations" : ["Garrison E, Marth G. Haplotype-based variant detection from short-read sequencing. arXiv preprint arXiv:1207.3907 [q-bio.GN] 2012"],
    "emails" : ["erik.garrison@gmail.com"],
    "papers" : ["http://arxiv.org/abs/1207.3907"],
    "tool" : "freebayes",
    "web pages" : ["https://github.com/ekg/freebayes"]
  },
  "description" : "Bayesian variant and haplotype calling",
  "categories" : ["Variant-discovery", "Short-variant-discovery", "Marthlab-software"],
  "tools" : ["freebayes"],
  "path" : "freebayes/bin",
  "executable" : "freebayes",
  "arguments" : {
    "Inputs" : [
      {
        "description" : "Add FILE to the set of BAM files to be analyzed.",
        "long form argument" : "--in",
        "short form argument" : "-i",
        "command line argument" : "--bam",
        "required" : true,
        "extensions" : ["bam"],
        "data type" : "string",
        "if input is stream" : {
          "argument" : "--stdin",
          "value" : "omit"
        },
        "allow multiple values" : true
      },
      {
        "description" : "bam index file.",
        "long form argument" : "--index",
        "short form argument" : "-x",
        "command line argument" : "none",
        "modify value" : "omit",
        "extensions" : ["bai"],
        "data type" : "string",
        "allow multiple values" : true,
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--in",
          "modify extension" : "append"
        },
        "include in reduced plot" : false
      },
      {
        "description" : "Use FILE as the reference sequence for analysis.",
        "long form argument" : "--fasta-reference",
        "short form argument" : "-r",
        "command line argument" : "--fasta-reference",
        "required" : true,
        "extensions" : ["fa", "fasta"],
        "data type" : "string"
      },
      {
        "description" : "The FASTA reference index file.",
        "long form argument" : "--fasta-index",
        "short form argument" : "-fx",
        "command line argument" : "none",
        "modify value" : "omit",
        "required" : true,
        "extensions" : ["fai"],
        "data type" : "string",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--fasta-reference",
          "modify extension" : "append"
        },
        "include in reduced plot" : false
      },
      {
        "description" : "Use variants reported in VCF file as input to the algorithm. Variants in this file will be treated as putative variants even if there is not enough support in the data to pass input filters.",
        "long form argument" : "--variant-input",
        "short form argument" : "-v",
        "command line argument" : "--variant-input",
        "extensions" : ["vcf.gz"],
        "data type" : "string"
      },
      {
        "description" : "Limit analysis to targets listed in the BED-format FILE.",
        "long form argument" : "--targets",
        "short form argument" : "-t",
        "command line argument" : "--targets",
        "extensions" : ["bed"],
        "data type" : "string"
      },
      {
        "description" : "Read a copy number map from the BED file FILE, which has the format: reference sequence, start, end, sample name, copy number ... for each region in each sample which does not have the default copy number as set by --ploidy.",
        "long form argument" : "--cnv-map",
        "short form argument" : "-cnv",
        "command line argument" : "--cnv-map",
        "data type" : "string"
      },
      {
        "description" : "A file containing per-sample estimates of contamination, such as those generated by VerifyBamID.  The format should be: sample p(read=R|genotype=AR) p(read=A|genotype=AA). Sample '*' can be used to set default contamination estimates.",
        "long form argument" : "--contamination-estimates",
        "short form argument" : "-ce",
        "command line argument" : "--contamination-estimates",
        "data type" : "string"
      },
      {
        "description" : "When specified, only variant alleles provided in this input VCF will be used for the construction of complex or haplotype alleles.",
        "long form argument" : "--haplotype-basis-alleles",
        "short form argument" : "-hba",
        "command line argument" : "--haplotype-basis-alleles",
        "extensions" : ["vcf.gz"],
        "data type" : "string"
      },
      {
        "description" : "Read length-dependent allele observation biases from FILE. The format is [length] [alignment efficiency relative to reference] where the efficiency is 1 if there is no relative observation bias.",
        "long form argument" : "--observation-bias",
        "short form argument" : "-ob",
        "command line argument" : "--observation-bias",
        "data type" : "string"
      }
    ],

    "Outputs" : [
      {
        "description" : "Output VCF-format results to FILE.",
        "long form argument" : "--out",
        "short form argument" : "-o",
        "command line argument" : "--vcf",
        "required" : true,
        "extensions" : ["vcf"],
        "data type" : "string",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--in",
          "modify extension" : "replace"
        },
        "if output to stream" : {
          "argument" : "omit",
          "value" : "omit"
        }
      }
    ],

    "Genomic regions" : [
      {
        "description" : "<chrom>:<start_position>..<end_position>. Limit analysis to the specified region, 0-base coordinates, end_position not included (same as BED format).",
        "long form argument" : "--region",
        "short form argument" : "-rg",
        "command line argument" : "--region",
        "data type" : "string"
      }
    ],

    "Reporting" : [
      {
        "description" : "Report sites if the probability that there is a polymorphism at the site is greater than N.  default: 0.0001.",
        "long form argument" : "--pvar",
        "short form argument" : "-v",
        "command line argument" : "--pvar",
        "data type" : "float"
      }
    ],

    "Population model" : [
      {
        "description" : "The expected mutation rate or pairwise nucleotide diversity among the population under analysis.  This serves as the single parameter to the Ewens Sampling Formula prior model. default: 0.001.",
        "long form argument" : "--theta",
        "short form argument" : "-T",
        "command line argument" : "--theta",
        "data type" : "float"
      },
      {
        "description" : "Sets the default ploidy for the analysis to N.  default: 2.",
        "long form argument" : "--ploidy",
        "short form argument" : "-p",
        "command line argument" : "--ploidy",
        "data type" : "integer"
      },
      {
        "description" : "Assume that samples result from pooled sequencing. Model pooled samples using discrete genotypes across pools. When using this flag, set --ploidy to the number of alleles in each sample or use the --cnv-map to define per-sample ploidy.",
        "long form argument" : "--pooled-discrete",
        "short form argument" : "-pd",
        "command line argument" : "--pooled-discrete",
        "data type" : "flag"
      },
      {
        "description" : "Output all alleles which pass input filters, regardless of genotyping outcome or model.",
        "long form argument" : "--pooled-continuous",
        "short form argument" : "-pc",
        "command line argument" : "--pooled-continuous",
        "data type" : "flag"
      }
    ],

    "Reference allele" : [
      {
        "description" : "This flag includes the reference allele in the analysis as if it is another sample from the same population.",
        "long form argument" : "--use-reference-allele",
        "short form argument" : "-Z",
        "command line argument" : "--use-reference-allele",
        "data type" : "flag"
      },
      {
        "description" : "Assign mapping quality of MQ to the reference allele at each site and base quality of BQ. default: 100,60",
        "long form argument" : "--reference-quality",
        "short form argument" : "-rq",
        "command line argument" : "--reference-quality",
        "data type" : "string"
      }
    ],

    "Allele scope" : [
      {
        "description" : "Ignore SNP alleles.",
        "long form argument" : "--no-snps",
        "short form argument" : "-I",
        "command line argument" : "--no-snps",
        "data type" : "flag"
      },
      {
        "description" : "Ignore insertion and deletion alleles.",
        "long form argument" : "--no-indels",
        "short form argument" : "-ni",
        "command line argument" : "--no-indels",
        "data type" : "flag"
      },
      {
        "description" : "Ignore multi-nuceotide polymorphisms, MNPs.",
        "long form argument" : "--no-mnps",
        "short form argument" : "-X",
        "command line argument" : "--no-mnps",
        "data type" : "flag"
      },
      {
        "description" : "Ignore complex events (composites of other classes).",
        "long form argument" : "--no-complex",
        "short form argument" : "-u",
        "command line argument" : "--no-complex",
        "data type" : "flag"
      },
      {
        "description" : "Evaluate only the best N SNP alleles, ranked by sum of supporting quality scores.  (Set to 0 to use all; default: all)",
        "long form argument" : "--use-best-n-alleles",
        "short form argument" : "-n",
        "command line argument" : "--use-best-n-alleles",
        "data type" : "integer"
      },
      {
        "description" : "Allow complex alleles with contiguous embedded matches of up to this length.",
        "long form argument" : "--max-complex-gap",
        "short form argument" : "-E",
        "command line argument" : "--max-complex-gap",
        "data type" : "integer"
      },
      {
        "description" : "Allow haplotype calls with contiguous embedded matches of up to this length. default: 3",
        "long form argument" : "--haplotype-length",
        "short form argument" : "-hl",
        "command line argument" : "--haplotype-length",
        "data type" : "integer"
      },
      {
        "description" : "When assembling observations across repeats, require the total repeat length at least this many bp. default: 5",
        "long form argument" : "--min-repeat-size",
        "short form argument" : "-mrs",
        "command line argument" : "--min-repeat-size",
        "data type" : "integer"
      },
      {
        "description" : "To detect interrupted repeats, build across sequence until it has entropy > N bits per bp.  (default: 0, off)",
        "long form argument" : "--min-repeat-entropy",
        "short form argument" : "-mre",
        "command line argument" : "--min-repeat-entropy",
        "data type" : "integer"
      },
      {
        "description" : "Exclude observations which do not fully span the dynamically-determined detection window. default: use all observations, dividing partial support across matching haplotypes when generating haplotypes.",
        "long form argument" : "--no-partial-observations",
        "short form argument" : "-npo",
        "command line argument" : "--no-partial-observations",
        "data type" : "flag"
      }
    ],

    "Indel realignment" : [
      {
        "description" : "Turn off left-alignment of indels, which is enabled by default.",
        "long form argument" : "--dont-left-align-indels",
        "short form argument" : "-dla",
        "command line argument" : "--dont-left-align-indels",
        "data type" : "flag"
      }
    ],

    "Input filters" : [
      {
        "description" : "Include duplicate-marked alignments in the analysis. Default: exclude duplicates marked as such in alignments.",
        "long form argument" : "--use-duplicate-reads",
        "short form argument" : "-ud",
        "command line argument" : "--use-duplicate-reads",
        "data type" : "flag"
      },
      {
        "description" : "Exclude alignments from analysis if they have a mapping quality less than Q.  default: 0",
        "long form argument" : "--min-mapping-quality",
        "short form argument" : "-mmq",
        "command line argument" : "--min-mapping-quality",
        "data type" : "integer"
      },
      {
        "description" : "Exclude alleles from analysis if their supporting base quality is less than Q.  default: 0",
        "long form argument" : "--min-base-quality",
        "short form argument" : "-mbq",
        "command line argument" : "--min-base-quality",
        "data type" : "integer"
      },
      {
        "description" : "Consider any allele in which the sum of qualities of supporting observations is at least Q. default: 0",
        "long form argument" : "--min-supporting-allele-qsum",
        "short form argument" : "-msa",
        "command line argument" : "--min-supporting-allele-qsum",
        "data type" : "integer"
      },
      {
        "description" : "Consider any allele in which and the sum of mapping qualities of supporting reads is at least Q. default: 0",
        "long form argument" : "--min-supporting-mapping-qsum",
        "short form argument" : "-Y",
        "command line argument" : "--min-supporting-mapping-qsum",
        "data type" : "integer"
      },
      {
        "description" : "Count mismatches toward --read-mismatch-limit if the base quality of the mismatch is >= Q. default: 10",
        "long form argument" : "--mismatch-base-quality-threshold",
        "short form argument" : "-Q",
        "command line argument" : "--mismatch-base-quality-threshold",
        "data type" : "integer"
      },
      {
        "description" : "Exclude reads with more than N mismatches where each mismatch has base quality >= mismatch-base-quality-threshold. default: ~unbounded",
        "long form argument" : "--read-mismatch-limit",
        "short form argument" : "-U",
        "command line argument" : "--read-mismatch-limit",
        "data type" : "integer"
      },
      {
        "description" : "Exclude reads with more than N [0,1] fraction of mismatches where each mismatch has base quality >= mismatch-base-quality-threshold. default: 1.0",
        "long form argument" : "--read-max-mismatch-fraction",
        "short form argument" : "-z",
        "command line argument" : "--read-max-mismatch-fraction",
        "data type" : "float"
      },
      {
        "description" : "Exclude reads with more than N base mismatches, ignoring gaps with quality >= mismatch-base-quality-threshold. default: ~unbounded",
        "long form argument" : "--read-snp-limit",
        "short form argument" : "-rsl",
        "command line argument" : "--read-snp-limit",
        "data type" : "integer"
      },
      {
        "description" : "Exclude reads with more than N separate gaps. default: ~unbounded",
        "long form argument" : "--read-indel-limit",
        "short form argument" : "-e",
        "command line argument" : "--read-indel-limit",
        "data type" : "integer"
      },
      {
        "description" : "Use stringent input base and mapping quality filters. Equivalent to -m 30 -q 20 -R 0 -S 0",
        "long form argument" : "--standard-filters",
        "short form argument" : "-sf",
        "command line argument" : "--standard-filters",
        "data type" : "flag"
      },
      {
        "description" : "Require at least this fraction of observations supporting an alternate allele within a single individual in the in order to evaluate the position.  default: 0.2",
        "long form argument" : "--min-alternate-fraction",
        "short form argument" : "-maf",
        "command line argument" : "--min-alternate-fraction",
        "data type" : "float"
      },
      {
        "description" : "Require at least this count of observations supporting an alternate allele within a single individual in order to evaluate the position.  default: 1",
        "long form argument" : "--min-alternate-count",
        "short form argument" : "-mac",
        "command line argument" : "--min-alternate-count",
        "data type" : "integer"
      },
      {
        "description" : "Require at least this sum of quality of observation supporting an alternate allele within a single individual in order to evaluate the position.  default: 0",
        "long form argument" : "--min-alternate-qsum",
        "short form argument" : "-maq",
        "command line argument" : "--min-alternate-qsum",
        "data type" : "integer"
      },
      {
        "description" : "Require at least this count of observations supporting an alternate allele within the total population in order to use the allele in analysis.  default: 1",
        "long form argument" : "--min-alternate-total",
        "short form argument" : "-mat",
        "command line argument" : "--min-alternate-total",
        "data type" : "integer"
      },
      {
        "description" : "Require at least this coverage to process a site. default: 0",
        "long form argument" : "--min-coverage",
        "short form argument" : "-mc",
        "command line argument" : "--min-coverage",
        "data type" : "integer"
      }
    ],

    "Population priors" : [
      {
        "description" : "Equivalent to --pooled-discrete --hwe-priors-off and removal of Ewens Sampling Formula component of priors.",
        "long form argument" : "--no-population-priors",
        "short form argument" : "-k",
        "command line argument" : "--no-population-priors",
        "data type" : "flag"
      }
    ],

    "Mappability priors" : [
      {
        "description" : "Disable estimation of the probability of the combination arising under HWE given the allele frequency as estimated by observation frequency.",
        "long form argument" : "--hwe-priors-off",
        "short form argument" : "-w",
        "command line argument" : "--hwe-priors-off",
        "data type" : "flag"
      },
      {
        "description" : "Disable incorporation of prior expectations about observations. Uses read placement probability, strand balance probability, and read position (5'-3') probability.",
        "long form argument" : "--binomial-obs-priors-off",
        "short form argument" : "-V",
        "command line argument" : "--binomial-obs-priors-off",
        "data type" : "flag"
      },
      {
        "description" : "Disable use of aggregate probability of observation balance between alleles as a component of the priors.",
        "long form argument" : "--allele-balance-priors-off",
        "short form argument" : "-a",
        "command line argument" : "--allele-balance-priors-off",
        "data type" : "flag"
      }
    ],

    "Genotype likelihoods" : [
      {
        "description" : "Limit estimated observation quality by capping base quality at Q.",
        "long form argument" : "--base-quality-cap",
        "short form argument" : "-bqc",
        "command line argument" : "--base-quality-cap",
        "data type" : "integer"
      },
      {
        "description" : "An estimate of contamination to use for all samples.  default: 10e-9",
        "long form argument" : "--prob-contamination",
        "short form argument" : "pco-",
        "command line argument" : "--prob-contamination",
        "data type" : "float"
      },
      {
        "description" : "Use legacy (polybayes equivalent) genotype likelihood calculations.",
        "long form argument" : "--legacy-gls",
        "short form argument" : "-lg",
        "command line argument" : "--legacy-gls",
        "data type" : "flag"
      }
    ],

    "Algorithmic features" : [
      {
        "description" : "Report genotypes using the maximum-likelihood estimate provided from genotype likelihoods.",
        "long form argument" : "--report-genotype-likelihood-max",
        "short form argument" : "-rgl",
        "command line argument" : "--report-genotype-likelihood-max",
        "data type" : "flag"
      },
      {
        "description" : "Iterate no more than N times during genotyping step. default: 1000.",
        "long form argument" : "--genotyping-max-iterations",
        "short form argument" : "-gmi",
        "command line argument" : "--genotyping-max-iterations",
        "data type" : "integer"
      },
      {
        "description" : "Integrate no deeper than the Nth best genotype by likelihood when genotyping. default: 6.",
        "long form argument" : "--genotyping-max-banddepth",
        "short form argument" : "-gmb",
        "command line argument" : "--genotyping-max-banddepth",
        "data type" : "integer"
      },
      {
        "description" : "Integrate all genotype combinations in our posterior space which include no more than N samples with their Mth best.",
        "long form argument" : "--posterior-integration-limits",
        "short form argument" : "-W",
        "command line argument" : "--posterior-integration-limits",
        "data type" : "string"
      },
      {
        "description" : "Skip sample genotypings for which the sample has no supporting reads.",
        "long form argument" : "--exclude-unobserved-genotypes",
        "short form argument" : "-N",
        "command line argument" : "--exclude-unobserved-genotypes",
        "data type" : "flag"
      },
      {
        "description" : "Limit posterior integration to samples where the second-best genotype likelihood is no more than log(N) from the highest genotype likelihood for the sample.  default: ~unbounded.",
        "long form argument" : "--genotype-variant-threshold",
        "short form argument" : "-S",
        "command line argument" : "--genotype-variant-threshold",
        "data type" : "integer"
      },
      {
        "description" : "Use mapping quality of alleles when calculating data likelihoods.",
        "long form argument" : "--use-mapping-quality",
        "short form argument" : "-j",
        "command line argument" : "--use-mapping-quality",
        "data type" : "flag"
      },
      {
        "description" : "Use a weighted sum of base qualities around an indel, scaled by the distance from the indel.  By default use a minimum BQ in flanking sequence.",
        "long form argument" : "--harmonic-indel-quality",
        "short form argument" : "-H",
        "command line argument" : "--harmonic-indel-quality",
        "data type" : "integer"
      },
      {
        "description" : "Incorporate non-independence of reads by scaling successive observations by this factor during data likelihood calculations.  default: 0.9",
        "long form argument" : "--read-dependence-factor",
        "short form argument" : "-D",
        "command line argument" : "--read-dependence-factor",
        "data type" : "float"
      },
      {
        "description" : "Calculate the marginal probability of genotypes and report as GQ in each sample field in the VCF output.",
        "long form argument" : "--genotype-qualities",
        "short form argument" : "-gq",
        "command line argument" : "--genotype-qualities",
        "required" : true,
        "data type" : "flag"
      }
    ]
  },

  "parameter sets" : [
    {
      "id" : "default",
      "description" : "test description",
      "data" : [
      ]
    },

    {
      "id" : "test",
      "description" : "Parameter set for use with the test-harness.",
      "data" : [
        {
          "id" : "BAM1",
          "argument" : "--in",
          "values" : [
            "$(RESOURCES)/tutorial/current/mutated_genome.bam",
            "$(RESOURCES)/tutorial/current/mutated_genome_set2.bam"
          ]
        },
        {
          "id" : "reference",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment_moblist.fa"]
        }
      ]
    }
  ]
}
