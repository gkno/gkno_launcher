{
  "id" : "freebayes",
  "description" : "Bayesian variant and haplotype calling",
  "category" : "variant discovery",
  "tools" : ["freebayes"],
  "path" : "freebayes/bin",
  "executable" : "freebayes",
  "help" : "--help|-h",
  "help group" : "Short variant discovery",
  "arguments" : {
    "inputs" : [
      {
        "description" : "Add FILE to the set of BAM files to be analyzed.",
        "long form argument" : "--bam",
        "short form argument" : "-b",
        "command line argument" : "--bam",
        "required" : true,
        "extensions" : [".bam"],
        "if input is stream" : "replace",
        "replace argument with" : {
          "argument" : "--stdin",
          "value" : "no value"
        },
        "data type" : "string",
        "allow multiple values" : true
      },
      {
        "description" : "bam index file.",
        "long form argument" : "--bam-index",
        "short form argument" : "-bi",
        "command line argument" : "--bam-index",
        "required" : true,
        "extensions" : [".bai"],
        "data type" : "string",
        "allow multiple values" : true,
        "modify argument name on command line" : "omit",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--bam",
          "modify extension" : "append"
        }
      },
      {
        "description" : "the input BAM file list.",
        "long form argument" : "--bam-list",
        "short form argument" : "-bl",
        "command line argument" : "none",
        "data type" : "string",
        "extensions" : [".bam"],
        "argument list" : {
          "use argument" : "--bam",
          "mode" : "repeat argument"
        }
      },
      {
        "description" : "Use FILE as the reference sequence for analysis.",
        "long form argument" : "--fasta-reference",
        "short form argument" : "-f",
        "command line argument" : "--fasta-reference",
        "required" : true,
        "extensions" : [".fa", ".fasta"],
        "data type" : "string"
      },
      {
        "description" : "Limit analysis to targets listed in the BED-format FILE.",
        "long form argument" : "--targets",
        "short form argument" : "-t",
        "command line argument" : "--targets",
        "extensions" : [".bed"],
        "data type" : "string"
      }
    ],

    "outputs" : [
      {
        "description" : "Output VCF-format results to FILE.",
        "long form argument" : "--vcf",
        "short form argument" : "-v",
        "command line argument" : "--vcf",
        "required" : true,
        "extensions" : [".vcf"],
        "data type" : "string",
        "if output to stream" : "do not include",
        "construct filename" : {
          "method": "from tool argument",
          "use argument" : "--bam",
          "modify extension" : "replace"
        }
      }
    ],

    "allele scope" : [
      {
        "description" : "Ignore SNP alleles.",
        "long form argument" : "--no-snps",
        "short form argument" : "-I",
        "command line argument" : "--no-snps",
        "extensions" : ["no extension"],
        "data type" : "flag"
      },
      {
        "description" : "Ignore insertion and deletion alleles.",
        "long form argument" : "--no-indels",
        "short form argument" : "-i",
        "command line argument" : "--no-indels",
        "extensions" : ["no extension"],
        "data type" : "flag"
      },
      {
        "description" : "Ignore multi-nuceotide polymorphisms, MNPs.",
        "long form argument" : "--no-mnps",
        "short form argument" : "-X",
        "command line argument" : "--no-mnps",
        "extensions" : ["no extension"],
        "data type" : "flag"
      },
      {
        "description" : "Ignore complex events (composites of other classes).",
        "long form argument" : "--no-complex",
        "short form argument" : "-u",
        "command line argument" : "--no-complex",
        "extensions" : ["no extension"],
        "data type" : "flag"
      },
      {
        "description" : "Evaluate only the best N SNP alleles, ranked by sum of supporting quality scores.  (Set to 0 to use all; default: all)",
        "long form argument" : "--use-best-n-alleles",
        "short form argument" : "-n",
        "command line argument" : "--use-best-n-alleles",
        "extensions" : ["no extension"],
        "data type" : "integer"
      },
      {
        "description" : "Allow complex alleles with contiguous embedded matches of up to this length.",
        "long form argument" : "--max-complex-gap",
        "short form argument" : "-E",
        "command line argument" : "--max-complex-gap",
        "extensions" : ["no extension"],
        "data type" : "integer"
      }
    ],

    "limit analysis" : [
      {
        "description" : "<chrom>:<start_position>..<end_position>. Limit analysis to the specified region, 0-base coordinates, end_position not included (same as BED format).",
        "long form argument" : "--region",
        "short form argument" : "-r",
        "command line argument" : "--region",
        "extensions" : ["no extension"],
        "data type" : "string"
      },
      {
        "description" : "A list of genomic regions to be applied with the --region argument. This option will lead to multiple freebayes calls in a single makefile.",
        "long form argument" : "--region-list-single",
        "short form argument" : "-rls",
        "command line argument" : "none",
        "extensions" : ["no extension"],
        "data type" : "string",
        "argument list" : {
          "use argument" : "--region",
          "mode" : "single makefile"
        }
      },
      {
        "description" : "A list of genomic regions to be applied with the --region argument. This option will lead to a single freebayes call in multiple makefiles.",
        "long form argument" : "--region-list-multiple",
        "short form argument" : "-rlm",
        "command line argument" : "none",
        "extensions" : ["no extension"],
        "data type" : "string",
        "argument list" : {
          "use argument" : "--region",
          "mode" : "multiple makefiles"
        }
      }
    ],

    "input filters" : [
      {
        "description" : "Require at least this count of observations supporting an alternate allele within a single individual in order to evaluate the position.  default: 1",
        "long form argument" : "--min-alternate-count",
        "short form argument" : "-C",
        "command line argument" : "--min-aliternate-count",
        "extensions" : ["no extension"],
        "data type" : "integer"
      },
      {
        "description" : "Require at least this sum of quality of observation supporting an alternate allele within a single individual in order to evaluate the position.  default: 0",
        "long form argument" : "--min-alternate-qsum",
        "short form argument" : "-3",
        "command line argument" : "--min-alternate-qsum",
        "extensions" : ["no extension"],
        "data type" : "integer"
      },
      {
        "description" : "Include duplicate-marked alignments in the analysis. Default: exclude duplicates marked as such in alignments.",
        "long form argument" : "--use-duplicate-reads",
        "short form argument" : "-4",
        "command line argument" : "--use-duplicate-reads",
        "data type" : "flag",
        "extensions" : ["no extension"]
      }
    ],

    "reporting" : [
      {
        "description" : "Report sites if the probability that there is a polymorphism at the site is greater than N.  default: 0.0001.",
        "long form argument" : "--pvar",
        "short form argument" : "-P",
        "command line argument" : "--pvar",
        "extensions" : ["no extension"],
        "data type" : "float"
      }
    ],

    "algorithmic features" : [
      {
        "description" : "Use mapping quality of alleles when calculating data likelihoods.",
        "long form argument" : "--use-mapping-quality",
        "short form argument" : "-j",
        "command line argument" : "--use-mapping-quality",
        "extensions" : ["no extension"],
        "data type" : "flag"
      },
      {
        "description" : "Integrate all genotype combinations in our posterior space which include no more than N samples with their Mth best.",
        "long form argument" : "--posterior-integration-limits",
        "short form argument" : "-W",
        "command line argument" : "--posterior-integration-limits",
        "extensions" : ["no extension"],
        "data type" : "string"
      },
      {
        "description" : "Limit posterior integration to samples where the second-best genotype likelihood is no more than log(N) from the highest genotype likelihood for the sample.  default: ~unbounded.",
        "long form argument" : "--genotype-variant-threshold",
        "short form argument" : "-S",
        "command line argument" : "--genotype-variant-threshold",
        "extensions" : ["no extension"],
        "data type" : "integer"
      },
      {
        "description" : "Iterate no more than N times during genotyping step. default: 25.",
        "long form argument" : "--genotyping-max-iterations",
        "short form argument" : "-B",
        "command line argument" : "--genotyping-max-iterations",
        "extensions" : ["no extension"],
        "data type" : "integer"
      }
    ],

    "population model" : [
      {
        "description" : "Sets the default ploidy for the analysis to N.  default: 2.",
        "long form argument" : "--ploidy",
        "short form argument" : "-p",
        "command line argument" : "--ploidy",
        "data type" : "integer",
        "extensions" : ["no extension"]
      }
    ]
  },

  "instances" : [
    {
      "ID" : "default",
      "description" : "test description",
      "nodes" : [
      ]
    },

    {
      "ID" : "test",
      "description" : "Instance for use with the test-harness.",
      "nodes" : [
        {
          "ID" : "BAM1",
          "argument" : "--bam",
          "values" : [
            "$(RESOURCES)/tutorial/current/mutated_genome.bam",
            "$(RESOURCES)/tutorial/current/mutated_genome_set2.bam"
          ]
        },
        {
          "ID" : "reference",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment_moblist.fa"]
        },
        {
          "ID" : "output path",
          "argument" : "--output-path",
          "values" : ["./"]
        }
      ]
    },

    {
      "ID" : "test-mr",
      "description" : "Instance for use with the test-harness.",
      "nodes" : [
        {
          "ID" : "mr",
          "argument" : "--multiple-runs",
          "values" : [
            "$(RESOURCES)/tutorial/current/freebayes-mr.json"
          ]
        },
        {
          "ID" : "reference",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment_moblist.fa"]
        },
        {
          "ID" : "output path",
          "argument" : "--output-path",
          "values" : ["./"]
        }
      ]
    },

    {
      "ID" : "test-il",
      "description" : "Instance for use with the test-harness.",
      "nodes" : [
        {
          "ID" : "il",
          "argument" : "--internal-loop",
          "values" : [
            "$(RESOURCES)/tutorial/current/freebayes-mr.json"
          ]
        },
        {
          "ID" : "reference",
          "argument" : "--fasta-reference",
          "values" : ["$(RESOURCES)/tutorial/current/chr20_fragment_moblist.fa"]
        },
        {
          "ID" : "output path",
          "argument" : "--output-path",
          "values" : ["./"]
        }
      ]
    }
  ]
}
